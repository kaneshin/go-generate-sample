package main

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"flag"
	"fmt"
	"go/format"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

type Data struct {
	Name        string `json:"name"`
	Version     string `json:"version"`
	Description string `json:"description"`
	Main        string `json:"main"`
	Scripts     struct {
		Test string `json:"test"`
	} `json:"scripts"`
	Repository struct {
		Type string `json:"type"`
		URL  string `json:"url"`
	} `json:"repository"`
	Author  string `json:"author"`
	License string `json:"license"`
	Bugs    struct {
		URL string `json:"url"`
	} `json:"bugs"`
	Homepage string `json:"homepage"`
}

var output = flag.String("output", "meta_gen.go", "output file name; default meta_gen.go")

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-meta: ")
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
		flag.PrintDefaults()
	}
	flag.Parse()

	args := flag.Args()
	if len(args) == 0 {
		flag.Usage()
		os.Exit(1)
	}

	// Generate phase: retrieve json
	var data Data
	for _, fp := range flag.Args()[:] {
		if !strings.HasSuffix(fp, ".json") {
			continue
		}
		b, err := ioutil.ReadFile(fp)
		if err != nil {
			log.Fatalf("open json file: %s", err)
		}
		err = json.Unmarshal(b, &data)
		if err != nil {
			log.Fatalf("encode json file: %s", err)
		}
		goto RETRIEVED
	}
RETRIEVED:

	// Generate phase: template.Execute
	params := map[string]interface{}{
		"author":   data.Author,
		"homepage": data.Homepage,
	}
	var buf bytes.Buffer
	t := template.Must(template.New("meta-txt").Parse(metaTxt))
	t.Execute(&buf, params)

	// Output phase
	var out bytes.Buffer
	out.WriteString(`// Code generated by gen-meta/main.go; DO NOT EDIT.
package main
`)
	out.Write(buf.Bytes())
	body, err := format.Source(out.Bytes())
	if err != nil {
		// The user can compile the output to see the error.
		log.Fatalf("warning: internal error: invalid Go generated: %s", err)
	}

	if err := ioutil.WriteFile(*output, body, 0644); err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

const metaTxt = `
import (
    "fmt"
    "context"
    "io/ioutil"
    "net/http"
)

var _ = fmt.Print

const Author = "{{.author}}"
const Homepage = "{{.homepage}}"

func HTML(ctx context.Context) ([]byte, error) {
    resp, err := http.Get(Homepage)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return nil, err
    }
    return body, nil
}`

// NOTE: go1.16
// //go:embed meta.txt
// var metaTxt string
